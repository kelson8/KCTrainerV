import re

def generate_native_map_cpp(natives_h_path, output_cpp_path):
    # Updated regex for your natives.h format:
    # It looks for 'static', then optional return type/template part
    # then the native name (Group 1),
    # then arguments in parentheses, then the closing brace '}' (for cases like WAIT)
    # OR the semicolon ';' (for standard declarations)
    # then a comment ' // ' followed by the hash (Group 2)
    native_pattern = re.compile(r'static (?:[\w\s<>,&]+?\s+)?([\w_]+)\s*\([^;]*\)(?: {[^}]*}|;)\s*// (0x[0-9A-Fa-f]+)')

    native_data = []

    try:
        with open(natives_h_path, 'r', encoding='utf-8') as f:
            for line in f:
                match = native_pattern.search(line)
                if match:
                    native_name = match.group(1).strip()
                    native_hash = match.group(2).strip()
                    native_data.append((native_name, native_hash))
    except FileNotFoundError:
        print(f"Error: {natives_h_path} not found.")
        return

    # Generate the C++ code for the map initialization
    with open(output_cpp_path, 'w', encoding='utf-8') as f:
        f.write('// This file was automatically generated by a script.\n')
        f.write('// Do not modify manually.\n\n')
        f.write('#include "NativeHashes.h"\n') # Assuming you have a NativeHashes.h
        f.write('#include <string>\n')
        f.write('#include <unordered_map>\n')
        f.write('#include <cstdint>\n\n') # For uint64_t

        f.write('std::unordered_map<std::string, uint64_t> g_NativeNameHashes = {\n')
        for name, hash_val in native_data:
            f.write(f'    {{"{name}", {hash_val}ULL}},\n') # Use ULL suffix for uint64_t literals
        f.write('};\n')

        f.write('\n// Function to lookup native hash by name\n')
        f.write('uint64_t GetNativeHashByName(const std::string& nativeName) {\n')
        f.write('    auto it = g_NativeNameHashes.find(nativeName);\n')
        f.write('    if (it != g_NativeNameHashes.end()) {\n')
        f.write('        return it->second;\n')
        f.write('    }\n')
        f.write('    // You might want more sophisticated error logging here\n')
        f.write('    // For now, print to stdout (console) and return 0\n')
        f.write('    printf("Lua Error: Native \'%s\' not found in hash map!\\n", nativeName.c_str());\n')
        f.write('    return 0;\n')
        f.write('}\n')


    print(f"Successfully generated {len(native_data)} native entries to {output_cpp_path}")

# --- How to use ---
if __name__ == "__main__":
    # IMPORTANT: Replace with the actual path to your natives.h file
    NATIVES_H_FILE = 'natives.h'
    # The output .cpp file where the map and lookup function will be generated
    OUTPUT_CPP_FILE = 'GeneratedNativeHashes.cpp'

    generate_native_map_cpp(NATIVES_H_FILE, OUTPUT_CPP_FILE)